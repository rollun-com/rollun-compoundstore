<?php

namespace rollun\test\compoundstore;

use rollun\compoundstore\Factory\CompoundAbstractFactory;
use rollun\compoundstore\Example\StoreCatalog;
use Interop\Container\ContainerInterface;
use rollun\compoundstore\SysEntities;
use rollun\compoundstore\Entity;
use rollun\compoundstore\Prop;
use rollun\compoundstore\SuperEntity;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-29 at 18:23:51.
 */
class CompoundAbstractFactoryTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Returner
     */
    protected $object;

    /**
     * @var ContainerInterface
     */
    protected $container;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->container = include './config/container.php';
        $this->object = new CompoundAbstractFactory();
    }

    public function test__canCreateIfConfigAbsent()
    {
        $requestedName = 'the_name_which_has_not_config';
        $result = $this->object->canCreate($this->container, $requestedName);
        $this->assertSame(
                false, $result
        );
    }

    public function test__CreateSysEntity()
    {
        $requestedName = SysEntities::TABLE_NAME;
        $result = $this->container->get($requestedName);
        $this->assertSame(
                SysEntities::class, get_class($result)
        );
    }

    public function test__CreateEntity()
    {
        $requestedName = StoreCatalog::PRODUCT_TABLE_NAME;
        $result = $this->container->get($requestedName);
        $this->assertSame(
                Entity::class, get_class($result)
        );
    }

    public function test__CreateProp()
    {
        $requestedName = StoreCatalog::PROP_LINKED_URL_TABLE_NAME;
        $result = $this->container->get($requestedName);
        $this->assertSame(
                Prop::class, get_class($result)
        );
    }

    public function test__CanCreateSuperEntity()
    {
        $requestedName = StoreCatalog::PROP_LINKED_URL_TABLE_NAME . SuperEntity::INNER_JOIN . StoreCatalog::PRODUCT_TABLE_NAME;
        $result = $this->container->has($requestedName);
        $this->assertFalse($result);

        $requestedName = StoreCatalog::PRODUCT_TABLE_NAME . SuperEntity::INNER_JOIN . StoreCatalog::PRODUCT_TABLE_NAME;
        $result = $this->container->has($requestedName);
        $this->assertTrue($result);

        $requestedName = StoreCatalog::PRODUCT_TABLE_NAME . SuperEntity::INNER_JOIN . '1' . StoreCatalog::PRODUCT_TABLE_NAME;
        $result = $this->container->has($requestedName);
        $this->assertFalse($result);
    }

    public function test__CreateSuperEntity()
    {
        $requestedName = StoreCatalog::PRODUCT_TABLE_NAME . SuperEntity::INNER_JOIN . StoreCatalog::PRODUCT_TABLE_NAME;
        $result = $this->container->get($requestedName);
        $this->assertEquals(
                SuperEntity::class, get_class($result)
        );
    }

}
